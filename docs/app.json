[{"name": "app.py", "content": "from shiny import App, render, ui\nfrom shiny.ui import h2, tags\n\nimport matplotlib.pyplot as plt\n\napp_ui = ui.page_fluid(\n\n    # Permitir formulas em LaTeX\n\n    ui.head_content(\n        ui.tags.script(\n            src=\"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"\n        ),\n        ui.tags.script(\n            \"if (window.MathJax) MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\"\n        ),\n    ),\n\n    # Titulo\n\n    ui.panel_title(\"Modelo IS LM\"),\n\n    ui.row(\n        ui.column(\n            12,\n            {\"class\": \"col-lg-6 py-5 mx-auto\"},\n            # LaTeX\n            ui.p( \"$$IS: r = \\\\frac{A_{0}}{I_{2}} - \\\\frac{1-C_{1}*(1-t) - I_{1}}{I_{2}}*Y$$\" ),\n            ui.p( \"$$LM: r = \\\\frac{ e }{ f }*Y - \\\\frac{ M^{s} }{ f }$$\" ),\n        ),\n        ui.column(\n            4,\n\n            tags.h4(\"Plot Parameters\"),\n            ui.input_slider(\"x\", \"X axis Max Range\", 0, 100, 30),\n            ui.input_slider(\"y\", \"Y axis Max Range\", 0, 100, 30),\n        ),\n        ui.column(\n            4,\n\n            tags.h4(\"IS Curve Parameters\"),\n            ui.input_slider(\"m\", \"Inclina\u00c3\u00a7\u00c3\u00a3o Curva IS\", 0.0, 1.0, 1.0),\n            ui.input_slider(\"A\", \"$$A_0$$\", 0, 100, 30),\n        ),\n        ui.column(\n            4,\n\n            tags.h4(\"LM Curve Parameters\"),\n            ui.input_slider(\"n\", \"Inclina\u00c3\u00a7\u00c3\u00a3o Curva LM\", 0.0, 1.0, 1.0),\n            ui.input_slider(\"Md\",\"$$M_d$$\", 0, 100, 0),\n        ),\n    ),\n    ui.column(\n        4,\n\n        tags.h4( \"Policy Parameters\"),\n        ui.input_slider(\"fp\", \"Fiscal Policy\", -1.0, 1.0, 0.0 ),\n        ui.input_slider(\"mp\", \"Monetary Policy\", -1.0, 1.0, 0.0 ),\n    ),\n    ui.column(\n        12,\n        {\"class\": \"col-lg-6 py-5 mx-auto\"},\n        ui.output_plot(\"my_plot\"),\n    )\n    \n)\n\ndef server(input, output, session):\n\n    @output\n\n    @render.plot()\n\n    def my_plot():\n\n        # LM Curve\n\n        lm_x_axis = [i for i in range(0, input.x())]\n        lm_y_axis = [input.Md() + input.n() * i for i in lm_x_axis]\n\n        # IS Curve\n\n        is_x_axis = [i for i in range(0, input.x())]\n        is_y_axis = [input.A() - i * input.m() for i in is_x_axis]\n \n        # Otimiza\u00c3\u00a7\u00c3\u00a3o do Modelo IS-LM\n\n        x_eq = (input.A() - input.Md()) / (input.m() + input.n())\n        y_eq = input.Md() + input.n() * x_eq\n\n        # Economic Policys\n\n        fp_power = input.fp()*5\n\n        mp_power = input.mp()*5*(-1)\n\n        is_y_pol = [i + fp_power for i in is_y_axis] \n\n        lm_y_pol = [i + mp_power for i in lm_y_axis]\n\n        x_eq_2 = (input.A() + fp_power - (input.Md() + mp_power)) / (input.m() + input.n())\n        y_eq_2 = input.Md() + mp_power + input.n() * x_eq_2\n        \n        # Plot\n\n        fig, ax = plt.subplots()\n\n        ax.plot(lm_x_axis, lm_y_axis, label=\"LM\")\n        ax.plot(is_x_axis, is_y_axis, label=\"IS\")\n\n        # Economic Policies - plot\n        \n        ax.plot( is_x_axis, is_y_pol , label = \"IS'\",\n                 linestyle = \"--\", color = \"#FF0000A1\" )\n\n        ax.plot( lm_x_axis, lm_y_pol , label = \"LM'\",\n                linestyle = \"--\", color = \"#0100FFFF\")\n\n        \n\n        ax.hlines(y_eq_2, xmin=0, xmax=x_eq_2, linestyles=\"dashed\", colors=\"grey\")\n        ax.vlines(x_eq_2, ymin=0, ymax=y_eq_2, linestyles=\"dashed\", colors=\"grey\")\n\n        ax.hlines(y_eq, xmin=0, xmax=x_eq, linestyles=\"dashed\", colors=\"black\")\n        ax.vlines(x_eq, ymin=0, ymax=y_eq, linestyles=\"dashed\", colors=\"black\")\n\n        ax.plot(x_eq, y_eq, \"ro\")\n\n        ax.plot(x_eq_2, y_eq_2, \"ro\")\n        \n        ax.legend(loc=\"lower center\", bbox_to_anchor=(0.5, -0.4), ncol=4)\n        ax.text( 1.5, input.y() + 1, f\"Y = {x_eq}, r = {y_eq}, Y' ={x_eq_2}, r' = {y_eq_2} \")\n\n        plt.xlim(0, input.x())\n        plt.ylim(0, input.y())\n        plt.xlabel(\"Y - National Income\")\n        plt.ylabel(\"r - Interest Rate\")\n\napp = App(app_ui, server)", "type": "text"}]